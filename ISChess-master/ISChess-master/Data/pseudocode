Pseudocode for recursive function

def evaluate_board(board):
    """ Function to evaluate score based on all pieces on the board
    """
    piece_values = {
        p: 1,
        n: 3,
        b: 3,
        r: 5,
        q: 9,
        k: 1000
    }

    # Evaluation score
    score = 0

    # Iterate over all the pieces on the board and sum the values
    for x in range(board.shape[0] - 1):
        for y in range(board.shape[1]):
            piece = board[x,y]
            piece_value = piece_values[piece[0]]
            if piece[1] == 'b'
                score -= piece_value
            else:
                score += piece_value

    return score

def gameOver(board)->bool:
    for x in range(board.shape[0] - 1):
        for y in range(board.shape[1]):
            if board[x,y] == "kw" or board[x,y] == "kb":
                return False
    return True

def greedy_move(board,color,sequence):
    best_move = None
    best_value = -float('inf') if board.turn == chess.WHITE else float('inf')

    for move in findLegalMoves(board,color,sequence):
        # Test move
        start_x = move[0][0]
        start_y = move[0][1]
        move_x = move[1][0]
        move_y = move[1][1]
        board[move_x][move_y] = board[start_x][start_y]
        board[start_x][start_y] = "--"
        eval = evaluate_board(board)

        # Evaluate move
        if color = "w":
            if eval > best_value:
                best_value = eval
                best_move = (move_x,move_y)
        else:
            if move_value < best_value:
                best_value = move_value
                best_move = move

    return best_move
